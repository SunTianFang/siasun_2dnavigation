// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DDS_Data.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_DDS_DATA_H_
#define _FAST_DDS_GENERATED_DDS_DATA_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DDS_Data_SOURCE)
#define DDS_Data_DllAPI __declspec( dllexport )
#else
#define DDS_Data_DllAPI __declspec( dllimport )
#endif // DDS_Data_SOURCE
#else
#define DDS_Data_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define DDS_Data_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure PoseDDS defined by the user in the IDL file.
 * @ingroup DDS_DATA
 */
class PoseDDS
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PoseDDS();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PoseDDS();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PoseDDS that will be copied.
     */
    eProsima_user_DllExport PoseDDS(
            const PoseDDS& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PoseDDS that will be copied.
     */
    eProsima_user_DllExport PoseDDS(
            PoseDDS&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PoseDDS that will be copied.
     */
    eProsima_user_DllExport PoseDDS& operator =(
            const PoseDDS& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PoseDDS that will be copied.
     */
    eProsima_user_DllExport PoseDDS& operator =(
            PoseDDS&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x PoseDDS object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const PoseDDS& x) const;

    /*!
     * @brief Comparison operator.
     * @param x PoseDDS object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const PoseDDS& x) const;

    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(
            long double _x);

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport long double x() const;

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport long double& x();

    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(
            long double _y);

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport long double y() const;

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport long double& y();

    /*!
     * @brief This function sets a value in member z
     * @param _z New value for member z
     */
    eProsima_user_DllExport void z(
            long double _z);

    /*!
     * @brief This function returns the value of member z
     * @return Value of member z
     */
    eProsima_user_DllExport long double z() const;

    /*!
     * @brief This function returns a reference to member z
     * @return Reference to member z
     */
    eProsima_user_DllExport long double& z();

    /*!
     * @brief This function sets a value in member theta
     * @param _theta New value for member theta
     */
    eProsima_user_DllExport void theta(
            long double _theta);

    /*!
     * @brief This function returns the value of member theta
     * @return Value of member theta
     */
    eProsima_user_DllExport long double theta() const;

    /*!
     * @brief This function returns a reference to member theta
     * @return Reference to member theta
     */
    eProsima_user_DllExport long double& theta();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const PoseDDS& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    long double m_x;
    long double m_y;
    long double m_z;
    long double m_theta;
};
/*!
 * @brief This class represents the structure PointCloudDDS defined by the user in the IDL file.
 * @ingroup DDS_DATA
 */
class PointCloudDDS
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PointCloudDDS();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PointCloudDDS();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PointCloudDDS that will be copied.
     */
    eProsima_user_DllExport PointCloudDDS(
            const PointCloudDDS& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PointCloudDDS that will be copied.
     */
    eProsima_user_DllExport PointCloudDDS(
            PointCloudDDS&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PointCloudDDS that will be copied.
     */
    eProsima_user_DllExport PointCloudDDS& operator =(
            const PointCloudDDS& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PointCloudDDS that will be copied.
     */
    eProsima_user_DllExport PointCloudDDS& operator =(
            PointCloudDDS&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x PointCloudDDS object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const PointCloudDDS& x) const;

    /*!
     * @brief Comparison operator.
     * @param x PointCloudDDS object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const PointCloudDDS& x) const;

    /*!
     * @brief This function sets a value in member seq
     * @param _seq New value for member seq
     */
    eProsima_user_DllExport void seq(
            uint64_t _seq);

    /*!
     * @brief This function returns the value of member seq
     * @return Value of member seq
     */
    eProsima_user_DllExport uint64_t seq() const;

    /*!
     * @brief This function returns a reference to member seq
     * @return Reference to member seq
     */
    eProsima_user_DllExport uint64_t& seq();

    /*!
     * @brief This function copies the value in member points
     * @param _points New value to be copied in member points
     */
    eProsima_user_DllExport void points(
            const std::vector<PoseDDS>& _points);

    /*!
     * @brief This function moves the value in member points
     * @param _points New value to be moved in member points
     */
    eProsima_user_DllExport void points(
            std::vector<PoseDDS>&& _points);

    /*!
     * @brief This function returns a constant reference to member points
     * @return Constant reference to member points
     */
    eProsima_user_DllExport const std::vector<PoseDDS>& points() const;

    /*!
     * @brief This function returns a reference to member points
     * @return Reference to member points
     */
    eProsima_user_DllExport std::vector<PoseDDS>& points();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const PointCloudDDS& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint64_t m_seq;
    std::vector<PoseDDS> m_points;
};
/*!
 * @brief This class represents the structure GeneralDataDDS defined by the user in the IDL file.
 * @ingroup DDS_DATA
 */
class GeneralDataDDS
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport GeneralDataDDS();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~GeneralDataDDS();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object GeneralDataDDS that will be copied.
     */
    eProsima_user_DllExport GeneralDataDDS(
            const GeneralDataDDS& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object GeneralDataDDS that will be copied.
     */
    eProsima_user_DllExport GeneralDataDDS(
            GeneralDataDDS&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object GeneralDataDDS that will be copied.
     */
    eProsima_user_DllExport GeneralDataDDS& operator =(
            const GeneralDataDDS& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object GeneralDataDDS that will be copied.
     */
    eProsima_user_DllExport GeneralDataDDS& operator =(
            GeneralDataDDS&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x GeneralDataDDS object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const GeneralDataDDS& x) const;

    /*!
     * @brief Comparison operator.
     * @param x GeneralDataDDS object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const GeneralDataDDS& x) const;

    /*!
     * @brief This function sets a value in member seq
     * @param _seq New value for member seq
     */
    eProsima_user_DllExport void seq(
            uint64_t _seq);

    /*!
     * @brief This function returns the value of member seq
     * @return Value of member seq
     */
    eProsima_user_DllExport uint64_t seq() const;

    /*!
     * @brief This function returns a reference to member seq
     * @return Reference to member seq
     */
    eProsima_user_DllExport uint64_t& seq();

    /*!
     * @brief This function sets a value in member commandid
     * @param _commandid New value for member commandid
     */
    eProsima_user_DllExport void commandid(
            char _commandid);

    /*!
     * @brief This function returns the value of member commandid
     * @return Value of member commandid
     */
    eProsima_user_DllExport char commandid() const;

    /*!
     * @brief This function returns a reference to member commandid
     * @return Reference to member commandid
     */
    eProsima_user_DllExport char& commandid();

    /*!
     * @brief This function sets a value in member robotid
     * @param _robotid New value for member robotid
     */
    eProsima_user_DllExport void robotid(
            char _robotid);

    /*!
     * @brief This function returns the value of member robotid
     * @return Value of member robotid
     */
    eProsima_user_DllExport char robotid() const;

    /*!
     * @brief This function returns a reference to member robotid
     * @return Reference to member robotid
     */
    eProsima_user_DllExport char& robotid();

    /*!
     * @brief This function sets a value in member ndparams
     * @param _ndparams New value for member ndparams
     */
    eProsima_user_DllExport void ndparams(
            char _ndparams);

    /*!
     * @brief This function returns the value of member ndparams
     * @return Value of member ndparams
     */
    eProsima_user_DllExport char ndparams() const;

    /*!
     * @brief This function returns a reference to member ndparams
     * @return Reference to member ndparams
     */
    eProsima_user_DllExport char& ndparams();

    /*!
     * @brief This function copies the value in member dparams
     * @param _dparams New value to be copied in member dparams
     */
    eProsima_user_DllExport void dparams(
            const std::vector<double>& _dparams);

    /*!
     * @brief This function moves the value in member dparams
     * @param _dparams New value to be moved in member dparams
     */
    eProsima_user_DllExport void dparams(
            std::vector<double>&& _dparams);

    /*!
     * @brief This function returns a constant reference to member dparams
     * @return Constant reference to member dparams
     */
    eProsima_user_DllExport const std::vector<double>& dparams() const;

    /*!
     * @brief This function returns a reference to member dparams
     * @return Reference to member dparams
     */
    eProsima_user_DllExport std::vector<double>& dparams();
    /*!
     * @brief This function sets a value in member niparams
     * @param _niparams New value for member niparams
     */
    eProsima_user_DllExport void niparams(
            char _niparams);

    /*!
     * @brief This function returns the value of member niparams
     * @return Value of member niparams
     */
    eProsima_user_DllExport char niparams() const;

    /*!
     * @brief This function returns a reference to member niparams
     * @return Reference to member niparams
     */
    eProsima_user_DllExport char& niparams();

    /*!
     * @brief This function copies the value in member iparams
     * @param _iparams New value to be copied in member iparams
     */
    eProsima_user_DllExport void iparams(
            const std::vector<char>& _iparams);

    /*!
     * @brief This function moves the value in member iparams
     * @param _iparams New value to be moved in member iparams
     */
    eProsima_user_DllExport void iparams(
            std::vector<char>&& _iparams);

    /*!
     * @brief This function returns a constant reference to member iparams
     * @return Constant reference to member iparams
     */
    eProsima_user_DllExport const std::vector<char>& iparams() const;

    /*!
     * @brief This function returns a reference to member iparams
     * @return Reference to member iparams
     */
    eProsima_user_DllExport std::vector<char>& iparams();
    /*!
     * @brief This function sets a value in member nbparams
     * @param _nbparams New value for member nbparams
     */
    eProsima_user_DllExport void nbparams(
            char _nbparams);

    /*!
     * @brief This function returns the value of member nbparams
     * @return Value of member nbparams
     */
    eProsima_user_DllExport char nbparams() const;

    /*!
     * @brief This function returns a reference to member nbparams
     * @return Reference to member nbparams
     */
    eProsima_user_DllExport char& nbparams();

    /*!
     * @brief This function copies the value in member bparams
     * @param _bparams New value to be copied in member bparams
     */
    eProsima_user_DllExport void bparams(
            const std::vector<uint8_t>& _bparams);

    /*!
     * @brief This function moves the value in member bparams
     * @param _bparams New value to be moved in member bparams
     */
    eProsima_user_DllExport void bparams(
            std::vector<uint8_t>&& _bparams);

    /*!
     * @brief This function returns a constant reference to member bparams
     * @return Constant reference to member bparams
     */
    eProsima_user_DllExport const std::vector<uint8_t>& bparams() const;

    /*!
     * @brief This function returns a reference to member bparams
     * @return Reference to member bparams
     */
    eProsima_user_DllExport std::vector<uint8_t>& bparams();
    /*!
     * @brief This function sets a value in member nsparams
     * @param _nsparams New value for member nsparams
     */
    eProsima_user_DllExport void nsparams(
            char _nsparams);

    /*!
     * @brief This function returns the value of member nsparams
     * @return Value of member nsparams
     */
    eProsima_user_DllExport char nsparams() const;

    /*!
     * @brief This function returns a reference to member nsparams
     * @return Reference to member nsparams
     */
    eProsima_user_DllExport char& nsparams();

    /*!
     * @brief This function copies the value in member sparams
     * @param _sparams New value to be copied in member sparams
     */
    eProsima_user_DllExport void sparams(
            const std::vector<std::string>& _sparams);

    /*!
     * @brief This function moves the value in member sparams
     * @param _sparams New value to be moved in member sparams
     */
    eProsima_user_DllExport void sparams(
            std::vector<std::string>&& _sparams);

    /*!
     * @brief This function returns a constant reference to member sparams
     * @return Constant reference to member sparams
     */
    eProsima_user_DllExport const std::vector<std::string>& sparams() const;

    /*!
     * @brief This function returns a reference to member sparams
     * @return Reference to member sparams
     */
    eProsima_user_DllExport std::vector<std::string>& sparams();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const GeneralDataDDS& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint64_t m_seq;
    char m_commandid;
    char m_robotid;
    char m_ndparams;
    std::vector<double> m_dparams;
    char m_niparams;
    std::vector<char> m_iparams;
    char m_nbparams;
    std::vector<uint8_t> m_bparams;
    char m_nsparams;
    std::vector<std::string> m_sparams;
};
/*!
 * @brief This class represents the structure NAVPointCloudDDS defined by the user in the IDL file.
 * @ingroup DDS_DATA
 */
class NAVPointCloudDDS
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport NAVPointCloudDDS();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~NAVPointCloudDDS();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object NAVPointCloudDDS that will be copied.
     */
    eProsima_user_DllExport NAVPointCloudDDS(
            const NAVPointCloudDDS& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object NAVPointCloudDDS that will be copied.
     */
    eProsima_user_DllExport NAVPointCloudDDS(
            NAVPointCloudDDS&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object NAVPointCloudDDS that will be copied.
     */
    eProsima_user_DllExport NAVPointCloudDDS& operator =(
            const NAVPointCloudDDS& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object NAVPointCloudDDS that will be copied.
     */
    eProsima_user_DllExport NAVPointCloudDDS& operator =(
            NAVPointCloudDDS&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x NAVPointCloudDDS object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const NAVPointCloudDDS& x) const;

    /*!
     * @brief Comparison operator.
     * @param x NAVPointCloudDDS object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const NAVPointCloudDDS& x) const;

    /*!
     * @brief This function copies the value in member points
     * @param _points New value to be copied in member points
     */
    eProsima_user_DllExport void points(
            const PointCloudDDS& _points);

    /*!
     * @brief This function moves the value in member points
     * @param _points New value to be moved in member points
     */
    eProsima_user_DllExport void points(
            PointCloudDDS&& _points);

    /*!
     * @brief This function returns a constant reference to member points
     * @return Constant reference to member points
     */
    eProsima_user_DllExport const PointCloudDDS& points() const;

    /*!
     * @brief This function returns a reference to member points
     * @return Reference to member points
     */
    eProsima_user_DllExport PointCloudDDS& points();
    /*!
     * @brief This function copies the value in member pose
     * @param _pose New value to be copied in member pose
     */
    eProsima_user_DllExport void pose(
            const PoseDDS& _pose);

    /*!
     * @brief This function moves the value in member pose
     * @param _pose New value to be moved in member pose
     */
    eProsima_user_DllExport void pose(
            PoseDDS&& _pose);

    /*!
     * @brief This function returns a constant reference to member pose
     * @return Constant reference to member pose
     */
    eProsima_user_DllExport const PoseDDS& pose() const;

    /*!
     * @brief This function returns a reference to member pose
     * @return Reference to member pose
     */
    eProsima_user_DllExport PoseDDS& pose();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const NAVPointCloudDDS& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    PointCloudDDS m_points;
    PoseDDS m_pose;
};

#endif // _FAST_DDS_GENERATED_DDS_DATA_H_