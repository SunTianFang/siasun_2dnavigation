// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DDS_DataSubscriber.h
 * This header file contains the declaration of the subscriber functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _FAST_DDS_GENERATED_DDS_DATA_SUBSCRIBER_H_
#define _FAST_DDS_GENERATED_DDS_DATA_SUBSCRIBER_H_

/* 此处为了解决与 Eigen 中 ALIVE 宏命名冲突 */
#ifdef ALIVE
#undef ALIVE
#endif

#include <fastdds/dds/domain/DomainParticipant.hpp>
#include <fastdds/dds/subscriber/DataReader.hpp>
#include <fastdds/dds/subscriber/DataReaderListener.hpp>
#include <fastdds/dds/subscriber/Subscriber.hpp>

#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/subscriber/SampleInfo.hpp>
#include <fastdds/dds/subscriber/qos/DataReaderQos.hpp>

#include "subscription_callback_helper.h"
#include "boost/bind.hpp"

using namespace eprosima::fastdds::dds;
using namespace RoboSLAM3;

template <typename DataType, typename Data>
class DDS_DataSubscriber
{
public:

    DDS_DataSubscriber();

    virtual ~DDS_DataSubscriber();

    template < typename Obj>
    bool init(const std::string &topic_name, void(Obj::*fp)(const Data* const), Obj* obj);

    // void run();

private:

    eprosima::fastdds::dds::DomainParticipant* participant_;
    eprosima::fastdds::dds::Subscriber* subscriber_;
    eprosima::fastdds::dds::Topic* topic_;
    eprosima::fastdds::dds::DataReader* reader_;
    eprosima::fastdds::dds::TypeSupport type_;

    SubscriptionCallbackHelperPtr helper;

    class SubListener : public eprosima::fastdds::dds::DataReaderListener
    {
    public:

        SubListener() = default;

        ~SubListener() override = default;

        void on_data_available(
                eprosima::fastdds::dds::DataReader* reader) override;

        void on_subscription_matched(
                eprosima::fastdds::dds::DataReader* reader,
                const eprosima::fastdds::dds::SubscriptionMatchedStatus& info) override;

        int matched = 0;
        // uint32_t samples = 0;

        SubscriptionCallbackHelperPtr innerHelper;
        void setHelper(SubscriptionCallbackHelperPtr tmpHelper) {innerHelper = tmpHelper;}
    }listener_;
};


template <typename DataType, typename Data>
DDS_DataSubscriber<DataType, Data>::DDS_DataSubscriber()
    : participant_(nullptr)
    , subscriber_(nullptr)
    , topic_(nullptr)
    , reader_(nullptr)
    // , type_(new cloud_infoPubSubType())
    , type_(new DataType())
    // , SubscriptionCallbackHelperPtr(nullptr)
{
}

template <typename DataType, typename Data>
DDS_DataSubscriber<DataType, Data>::~DDS_DataSubscriber()
{
    if (reader_ != nullptr)
    {
        subscriber_->delete_datareader(reader_);
    }
    if (topic_ != nullptr)
    {
        participant_->delete_topic(topic_);
    }
    if (subscriber_ != nullptr)
    {
        participant_->delete_subscriber(subscriber_);
    }
    DomainParticipantFactory::get_instance()->delete_participant(participant_);
}

template <typename DataType, typename Data>
template <typename Obj>
bool DDS_DataSubscriber<DataType, Data>::init(const std::string &topic_name, void(Obj::*fp)(const Data* const), Obj* obj)
{
    //CREATE THE PARTICIPANT
    DomainParticipantQos pqos;
    pqos.name("Participant_sub");
    participant_ = DomainParticipantFactory::get_instance()->create_participant(0, pqos);
    if (participant_ == nullptr)
    {
        return false;
    }

    //REGISTER THE TYPE
    type_.register_type(participant_);

    //CREATE THE SUBSCRIBER
    subscriber_ = participant_->create_subscriber(SUBSCRIBER_QOS_DEFAULT, nullptr);
    if (subscriber_ == nullptr)
    {
        return false;
    }

    //CREATE THE TOPIC
    topic_ = participant_->create_topic(
        // "DDS_DataTopic",
        topic_name,
        type_.get_type_name(),
        TOPIC_QOS_DEFAULT);
    if (topic_ == nullptr)
    {
        return false;
    }

    //CREATE THE READER
    DataReaderQos rqos = DATAREADER_QOS_DEFAULT;
    rqos.reliability().kind = RELIABLE_RELIABILITY_QOS;

    // 配置缓存策略, 详见 historyQos
    // rqos.history().kind = KEEP_ALL_HISTORY_QOS;
    // rqos.history().depth = 20;

    reader_ = subscriber_->create_datareader(topic_, rqos, &listener_);
    if (reader_ == nullptr)
    {
        return false;
    }

    // 接收用户注册的函数
    // boost::function <void (const Data* const)> _callback = boost::bind (fp ,obj, boost::placeholders::_1);

    //将obj成员函数里的成员函数fp与_callback绑定
    boost::function <void (const Data* const)> _callback = boost::bind (fp ,obj, _1);   // 苏翔提供修改建议, 上面版本在ubuntu16.04下有问题
    helper = boost::make_shared< SubscriptionCallbackHelperT<const Data* const> > ( _callback );
    listener_.setHelper( helper );

    return true;
}

template <typename DataType, typename Data>
void DDS_DataSubscriber<DataType, Data>::SubListener::on_subscription_matched(
        DataReader*,
        const SubscriptionMatchedStatus& info)
{
    if (info.current_count_change == 1)
    {
        matched = info.total_count;
        std::cout << "Subscriber matched." << std::endl;
    }
    else if (info.current_count_change == -1)
    {
        matched = info.total_count;
        std::cout << "Subscriber unmatched." << std::endl;
    }
    else
    {
        std::cout << info.current_count_change
                  << " is not a valid value for SubscriptionMatchedStatus current count change" << std::endl;
    }
}

//从publisher处接收数据，通过回调函数向外发送
template <typename DataType, typename Data>
void DDS_DataSubscriber<DataType, Data>::SubListener::on_data_available(
        DataReader* reader)
{
    // Take data
    SampleInfo info;

    void* readMsg = new Data();

    if (reader->take_next_sample( readMsg, &info ) == ReturnCode_t::RETCODE_OK)
    {
        if (info.valid_data)
        {
            // Print your structure data here.
            // ++samples;
            // std::cout << "Sample received, count=" << samples << std::endl;

            // std::cout << "subscriber.h dds: seq = " << ((Data*)readMsg)->cloud_deskewed().header().seq() << ", stamp = " << std::setprecision(19) << ((Data*)readMsg)->cloud_deskewed().header().stamp() << ", frame_id = " << ((Data*)readMsg)->cloud_deskewed().header().frame_id() << std::endl;

            innerHelper -> call( readMsg );
        }
    }

    delete static_cast<Data*>(readMsg);
}

#endif // _FAST_DDS_GENERATED_DDS_DATA_SUBSCRIBER_H_
